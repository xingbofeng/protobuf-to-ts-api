{"version":3,"file":"cli.js","mappings":"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","sources":["webpack://pb-to-ts-api/webpack/bootstrap","webpack://pb-to-ts-api/webpack/runtime/compat get default export","webpack://pb-to-ts-api/webpack/runtime/define property getters","webpack://pb-to-ts-api/webpack/runtime/hasOwnProperty shorthand","webpack://pb-to-ts-api/external commonjs \"chalk\"","webpack://pb-to-ts-api/external commonjs \"glob\"","webpack://pb-to-ts-api/external commonjs \"minimist\"","webpack://pb-to-ts-api/external commonjs \"express\"","webpack://pb-to-ts-api/external node-commonjs \"fs\"","webpack://pb-to-ts-api/./src/interfaces/RequestMethods.ts","webpack://pb-to-ts-api/./src/utils/getRequestMethod.ts","webpack://pb-to-ts-api/external node-commonjs \"path\"","webpack://pb-to-ts-api/external commonjs \"mkdirp\"","webpack://pb-to-ts-api/external commonjs \"protobufjs-cli/pbjs\"","webpack://pb-to-ts-api/external commonjs \"protobufjs-cli/pbts\"","webpack://pb-to-ts-api/external commonjs \"ts-morph\"","webpack://pb-to-ts-api/./src/modules/travelAllModule.ts","webpack://pb-to-ts-api/./src/modules/saveApiFile.ts","webpack://pb-to-ts-api/external commonjs \"typescript-json-schema\"","webpack://pb-to-ts-api/external commonjs \"json-schema-faker\"","webpack://pb-to-ts-api/./src/index.ts","webpack://pb-to-ts-api/./src/modules/mockServer.ts","webpack://pb-to-ts-api/./src/modules/transferTSFile.ts","webpack://pb-to-ts-api/./src/modules/getPbjsFile.ts","webpack://pb-to-ts-api/./src/modules/getPbtsFile.ts","webpack://pb-to-ts-api/./src/modules/saveTypeScriptDefineFile.ts","webpack://pb-to-ts-api/./src/modules/saveJSONSchemaFile.ts","webpack://pb-to-ts-api/./src/modules/saveMockJSONFile.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"chalk\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"glob\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"minimist\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","export enum RequestMethods {\n  post = 'post',\n  get = 'get',\n}\n","import { RequestMethods } from '../interfaces/RequestMethods';\n\nexport function getRequestMethod(apiName: string): RequestMethods {\n  return /post/.test(apiName.toLowerCase()) ? RequestMethods.post : RequestMethods.get;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"mkdirp\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"protobufjs-cli/pbjs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"protobufjs-cli/pbts\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"ts-morph\");","import { ModuleDeclaration } from 'ts-morph';\n/**\n * 递归一个ts文件下所有模块\n * @param {ModuleDeclaration[]} modules 通过ts-morph生成模块声明\n * @param {Function} callback 递归一个ts文件所有模块下对于每个模块的回调函数\n * @param {String} parentName 递归到当前模块，所有父级namespace的名称，通过.符号分割\n */\nexport function travelAllModule(modules: ModuleDeclaration[], callback: (module: ModuleDeclaration, fullName: string) => void, parentName = '') {\n  for (const module of modules) {\n    const children = module.getModules();\n    const hasModule = children.length > 0;\n    const fullName = `${parentName ? `${parentName}.` : ''}${module.getName()}`;\n    callback(module, fullName);\n    if (hasModule) {\n      travelAllModule(children, callback, fullName);\n    }\n  }\n}\n","import fs from 'fs';\nimport path from 'path';\nimport { Project } from 'ts-morph';\n\nimport { IOptions } from '../interfaces/IOptions';\nimport { RequestMethods } from '../interfaces/RequestMethods';\nimport { getRequestMethod } from '../utils/getRequestMethod';\nimport { travelAllModule } from './travelAllModule';\n\nconst getLinePerfix = (requestModule: string, tsDefineFilename: string) =>\n  `/* eslint-disable */\nimport request from ${requestModule};\nimport api from './${tsDefineFilename.replace('.ts', '')}';\n`;\n\nconst getLine = (apiName: string, reqName: string, rspName: string, requestMethod: RequestMethods, baseUrl: string) => `\nexport function ${apiName}(req: api.${reqName}): Promise<api.${rspName}> {\n  return request.${requestMethod}('${baseUrl}${apiName}', ${requestMethod === 'post' ? 'req' : '{ params: req }'});\n};\n`;\n\n/**\n * 生成前端api请求文件\n * @param {String} pbtsFilePath 生成的d.ts定义文件的路径\n * @param {Object} options 用户传入的自定义配置选项\n */\nexport async function saveApiFile(pbtsFilePath: string, options: IOptions) {\n  const {\n    requestModule,\n    baseUrl,\n  } = options;\n  // 获取当前d.ts文件的目录名称和文件名称\n  const tsDefineDirname = path.dirname(pbtsFilePath);\n  const tsDefineFilename = path.basename(pbtsFilePath);\n  let apiline = '';\n  apiline += getLinePerfix(\n    requestModule,\n    tsDefineFilename,\n  );\n  const project = new Project();\n  project.addSourceFileAtPath(pbtsFilePath);\n  const file = project.getSourceFileOrThrow(pbtsFilePath);\n  const modules = file.getModules();\n  travelAllModule(modules, (module, parentName) => {\n    const interfaces = module.getInterfaces();\n    interfaces.length && interfaces.forEach(i => {\n      const reqName = i.getName();\n      // 找到请求的interface名称\n      const reqNameMatchs = reqName.match(/^I(\\S*)Req$/);\n      if (reqNameMatchs && reqNameMatchs.length) {\n        const apiName = reqNameMatchs[1];\n        // 找到返回值的interface\n        const rspName = `I${apiName}Rsp`;\n        const rsp = interfaces.find(item => item.getName() === rspName);\n        if (!rsp) {\n          return;\n        }\n        apiline += getLine(\n          apiName,\n          `${parentName}.${reqName}`,\n          `${parentName}.${rspName}`,\n          getRequestMethod(apiName),\n          baseUrl,\n        );\n      }\n    });\n  });\n\n  await fs.promises.writeFile(path.resolve(tsDefineDirname, tsDefineFilename.replace('.d.ts', '.ts')), apiline);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"typescript-json-schema\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"json-schema-faker\");","import chalk from 'chalk';\nimport { Express } from 'express';\nimport glob from 'glob';\nimport minimist from 'minimist';\n\nimport { IOptions } from './interfaces/IOptions';\nimport { initServer } from './modules/mockServer';\nimport { transferTSFile } from './modules/transferTSFile';\n\nconst getUsage = () =>\n  `Usage: ${chalk.bold.green('pb2TSApi')} [options] ${chalk.bold.red('[file1.proto file2.proto ...]')} or ${chalk.bold.red('[./**/*.proto]')}`;\n\nconst getHelp = () =>\n  `Help:\n${chalk.bold.green('--requestModule -r')}: the request module of you want to set, default is ${chalk.bold.red('\\'axios\\'')}, you can set to your custom request method, for example ${chalk.bold.red('\\'@/request\\'')};\n${chalk.bold.green('--baseUrl -b')}: the base url of you want to set, default is ${chalk.bold.red('\\'/\\'')}, you can set to your api path, for example ${chalk.bold.red('\\'/api\\'')};\n${chalk.bold.green('--folder -f')}: the folder of you want to save the output files, default is ${chalk.bold.red('\\'./api\\'')};\n${chalk.bold.green('--root -r')}: the root path set to protobufjs, default is ${chalk.bold.red('the path of this command run')};\n${chalk.bold.green('--optional -o')}: is transfrom d.ts optional to false, because of protobuf 3.0 set all filed is optional, default is ${chalk.bold.red('true')};\n${chalk.bold.green('--mock -m')}: is open mock server, default is ${chalk.bold.red('false')};\n${chalk.bold.green('--port -p')}: mock server port, default is ${chalk.bold.red('3000')};\n`;\n\nexport async function main() {\n  try {\n    const argv = minimist(process.argv.slice(2), {\n      alias: {\n        requestModule: 'r',\n        baseUrl: 'b',\n        folder: 'f',\n        root: 'r',\n        optional: 'o',\n        mock: 'm',\n        port: 'p',\n        help: 'h',\n      },\n      string: ['requestModule', 'baseUrl', 'folder', 'root', 'port'],\n      boolean: ['optional', 'mock'],\n      default: {\n        requestModule: 'axios',\n        baseUrl: '/',\n        folder: './api',\n        root: process.cwd(),\n        optional: true,\n        mock: false,\n        port: '3000',\n        help: '',\n      },\n    });\n    if (argv.help) {\n      process.stderr.write(getHelp());\n      process.exit(1);\n    }\n    const { _: files } = argv;\n    const options: IOptions = {\n      requestModule: argv.requestModule,\n      baseUrl: argv.baseUrl,\n      folder: argv.folder,\n      root: argv.root,\n      optional: argv.optional,\n      mock: argv.mock,\n      port: argv.port,\n      help: argv.help,\n    };\n    if (!files.length) {\n      process.stderr.write(getUsage());\n      process.exit(1);\n    }\n    const protoFiles = await glob(files, { ignore: 'node_modules/**', windowsPathsNoEscape: true });\n    if (!protoFiles.length) {\n      process.stderr.write(chalk.bold.red(`there is not files for the flowing paths: \\n ${files.join('\\n')}`));\n      process.exit(1);\n    }\n    let mockServer: Express;\n    if (options.mock) {\n      mockServer = initServer(options);\n    }\n    await Promise.all(protoFiles.map(filePath => transferTSFile(filePath, mockServer, options)));\n  } catch (err) {\n    console.error(err);\n    process.exit(1);\n  }\n}\n\nmain();\n","import express, { Express } from 'express';\nimport fs from 'fs';\n\nimport { IOptions } from '../interfaces/IOptions';\nimport { getRequestMethod } from '../utils/getRequestMethod';\n\n/**\n * 初始化 mock server\n * @param {IOptions} options 用户自定义配置\n * @returns {Express} mockServer 通过express实例化的mock server app\n */\nexport function initServer(options: IOptions) {\n  const mockServer = express();\n  const { port = '3000' } = options;\n  mockServer.listen(+port, () => {\n    console.log(`mock server listening on port ${port}`);\n  });\n  return mockServer;\n}\n\n/**\n * 拿到mock文件，生成mock server\n * @param {String} mockFilePath mock文件的路径\n * @param {Express} mockServer express server 对象\n * @param {IOptions} options 用户自定义配置\n */\nexport async function generateMockRoute(mockFilePath: string, mockServer: Express, options: IOptions) {\n  const { baseUrl } = options;\n  const mockFile = await fs.promises.readFile(mockFilePath, { encoding: 'utf-8' });\n  const json = JSON.parse(mockFile);\n  for (const apiName in json) {\n    if (Object.hasOwnProperty.call(json, apiName)) {\n      const requestMethod = getRequestMethod(apiName);\n      mockServer[requestMethod](`${baseUrl}${apiName}`, (req, res) => {\n        res.send(json[apiName]);\n      });\n      console.log(`mockServer generate mock route: ${baseUrl}${apiName} success`);\n    }\n  }\n}\n","import { Express } from 'express';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { IOptions } from '../interfaces/IOptions';\nimport { getPbjsFile } from './getPbjsFile';\nimport { getPbtsFile } from './getPbtsFile';\nimport { generateMockRoute } from './mockServer';\nimport { saveApiFile } from './saveApiFile';\nimport { saveJSONSchemaFile } from './saveJSONSchemaFile';\nimport { saveMockJSONFile } from './saveMockJSONFile';\nimport { saveTypeScriptDefineFile } from './saveTypeScriptDefineFile';\n\n/**\n * 转换protobuf定义文件为ts定义文件和api请求文件\n * @param {String} filePath protobuf定义文件的路径\n * @param {Express} mockServer mockServer对象，是一个express实例化的对象\n * @param {Object} options 用户自定义配置\n */\nexport async function transferTSFile(filePath: string, mockServer: Express, options: IOptions) {\n  const pbjsFilePath = await getPbjsFile(filePath, options);\n  const pbtsFilePath = await getPbtsFile(pbjsFilePath, options);\n  await fs.promises.unlink(pbjsFilePath);\n  await saveTypeScriptDefineFile(pbtsFilePath, options);\n  await saveApiFile(pbtsFilePath, options);\n  const jsonSchemaFilePath = await saveJSONSchemaFile(pbtsFilePath);\n  const mockFilePath = await saveMockJSONFile(jsonSchemaFilePath);\n  console.log(`success generate ${filePath} to ${path.resolve(options.folder, filePath)}.d.ts and ${path.resolve(options.folder, filePath)}.ts`);\n  if (options.mock && mockServer) {\n    console.log('begin open mock server');\n    await generateMockRoute(mockFilePath, mockServer, options);\n  }\n}\n","import mkdirp from 'mkdirp';\nimport path from 'path';\nimport pbjs from 'protobufjs-cli/pbjs';\n\nimport { IOptions } from '../interfaces/IOptions';\n\n/**\n * 通过protobuf-cli生成临时的js文件，用于再生成ts文件，生成ts文件后，删掉临时的js文件\n * @param {String} filePath proto文件的路径\n * @returns {Promise<string>} 生成临时的js文件的路径\n */\nexport async function getPbjsFile(filePath: string, options: IOptions): Promise<string> {\n  const { folder = '' } = options;\n  const fileName = filePath.replace('.proto', '.js');\n  const pbjsFilePath = path.resolve(process.cwd(), folder, fileName);\n  const p = path.dirname(pbjsFilePath);\n  await mkdirp(p);\n  return new Promise((resolve, reject) => {\n    pbjs.main(['-p', options.root, '-t', 'static-module', '-w', 'commonjs', '-o', pbjsFilePath, path.resolve(process.cwd(), filePath)], err => {\n      if (err) {\n        reject(err);\n      }\n      resolve(pbjsFilePath);\n    });\n  });\n}\n","import path from 'path';\nimport pbts from 'protobufjs-cli/pbts';\n\nimport { IOptions } from '../interfaces/IOptions';\n\n/**\n * 通过protobuf-cli生成d.ts文件\n * @param {String} pbjsFilePath 生成的js文件的路径\n * @returns {Promise<string>} 生成临时的js文件的路径\n */\nexport function getPbtsFile(pbjsFilePath: string, options: IOptions): Promise<string> {\n  const { folder = '' } = options;\n  const pbtsFilePath = path.resolve(process.cwd(), folder, pbjsFilePath.replace('.js', '.d.ts'));\n  return new Promise((resolve, reject) => {\n    pbts.main(['-p', options.root, '-o', pbtsFilePath, pbjsFilePath], err => {\n      if (err) {\n        reject(err);\n      }\n      resolve(pbtsFilePath);\n    });\n  });\n}\n","import { ImportDeclaration, Project } from 'ts-morph';\n\nimport { IOptions } from '../interfaces/IOptions';\nimport { travelAllModule } from './travelAllModule';\n\n/**\n * 去除protobuf-cli生成的d.ts文件中的冗余的class模块\n * @param {String} pbtsFilePath 生成的d.ts定义文件的路径\n * @param {Object} options 用户传入的自定义配置选项\n */\nexport async function saveTypeScriptDefineFile(pbtsFilePath: string, options: IOptions) {\n  const project = new Project();\n  project.addSourceFileAtPath(pbtsFilePath);\n  const file = project.getSourceFileOrThrow(pbtsFilePath);\n  const modules = file.getModules();\n  // 去掉生成的import\n  file.getImportDeclarations().forEach(i => i.remove());\n\n  // 对于importString的处理\n  file.getImportStringLiterals().forEach(i => {\n    const p = i.getParent()?.getParent() as ImportDeclaration;\n    p.remove();\n  });\n\n  travelAllModule(modules, module => {\n    // 去掉生成的class\n    const classes = module.getClasses();\n    classes.forEach(c => c.remove());\n\n    // 去掉生成的rpc-type\n    const typeAliases = module.getTypeAliases();\n    typeAliases.forEach(t => t.remove());\n\n    if (!options.optional) {\n      module.getInterfaces().forEach(item => {\n        const structure = item.getStructure();\n        structure.properties?.forEach(property => {\n          property.hasQuestionToken = false;\n          if (typeof property.type === 'string') {\n            property.type = property.type.replace(/^\\((\\S*)\\|null\\)$/, '$1');\n          }\n        });\n        item.set(structure);\n      });\n    }\n  });\n  project.saveSync();\n}\n","import fs from 'fs';\nimport path from 'path';\nimport { buildGenerator, getProgramFromFiles } from 'typescript-json-schema';\n\n/**\n * 生成前端api请求JSON Schema 文件\n * @param {String} pbtsFilePath 生成的d.ts定义文件的路径\n * @returns {String} jsonSchemaFilePath 生成的json schema 文件路径\n */\nexport async function saveJSONSchemaFile(pbtsFilePath: string) {\n  const settings = {\n    required: true,\n  };\n  const compilerOptions = {\n    strictNullChecks: true,\n  };\n\n  const program = getProgramFromFiles([path.resolve(pbtsFilePath)], compilerOptions, process.cwd());\n  const generator = buildGenerator(program, settings);\n  const symbols = (generator?.getUserSymbols() || []).filter(symbol => /I(\\S*)Rsp$/.test(symbol));\n  const schema = generator?.getSchemaForSymbols(symbols);\n  const jsonSchemaFilePath = pbtsFilePath.replace('.d.ts', '.json');\n  await fs.promises.writeFile(jsonSchemaFilePath, JSON.stringify(schema, null, 2), { encoding: 'utf-8' });\n  return jsonSchemaFilePath;\n}\n","import fs from 'fs';\nimport { JSONSchemaFaker } from 'json-schema-faker';\nimport { JsonObject, JsonValue } from 'type-fest';\n\n/**\n * 生成前端api请求 mock 文件\n * @param {String} jsonSchemaFilePath 生成的JSON Schema 文件的路径\n */\nexport async function saveMockJSONFile(jsonSchemaFilePath: string) {\n  const schemaFileStr = await fs.promises.readFile(jsonSchemaFilePath, { encoding: 'utf-8' });\n  const schema = JSON.parse(schemaFileStr.replace(/(?<=#\\/)definitions\\//g, ''));\n  const jsfResult = await JSONSchemaFaker.resolve(schema.definitions) as JsonObject;\n  const json: Record<string, JsonValue> = {};\n  for (const key in jsfResult) {\n    if (Object.hasOwnProperty.call(jsfResult, key)) {\n      const rspNameMatchs = key.match(/I(\\S*)Rsp$/);\n      if (rspNameMatchs && rspNameMatchs.length) {\n        const apiName = rspNameMatchs[1];\n        json[apiName] = jsfResult[key];\n      }\n    }\n  }\n  const fileContent = JSON.stringify(json, null, 2);\n  const mockFilePath = jsonSchemaFilePath.replace('.json', '.mock.json');\n  fs.writeFileSync(mockFilePath, fileContent, { encoding: 'utf-8' });\n  return mockFilePath;\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","require","RequestMethods","getRequestMethod","apiName","test","toLowerCase","post","travelAllModule","modules","callback","parentName","children","getModules","hasModule","length","fullName","getName","getLinePerfix","requestModule","tsDefineFilename","replace","getLine","reqName","rspName","requestMethod","baseUrl","async","argv","minimist","process","slice","alias","folder","root","optional","mock","port","help","string","boolean","default","cwd","stderr","write","chalk","exit","_","files","options","protoFiles","glob","ignore","windowsPathsNoEscape","mockServer","join","express","listen","console","log","initServer","Promise","all","map","filePath","pbjsFilePath","fileName","path","p","mkdirp","resolve","reject","pbjs","err","getPbjsFile","pbtsFilePath","pbts","getPbtsFile","fs","project","Project","addSourceFileAtPath","file","getSourceFileOrThrow","getImportDeclarations","forEach","i","remove","getImportStringLiterals","_i$getParent","getParent","getClasses","c","getTypeAliases","t","getInterfaces","item","_structure$properties","structure","getStructure","properties","property","hasQuestionToken","type","set","saveSync","saveTypeScriptDefineFile","tsDefineDirname","apiline","interfaces","reqNameMatchs","match","find","saveApiFile","jsonSchemaFilePath","program","getProgramFromFiles","strictNullChecks","generator","buildGenerator","required","symbols","getUserSymbols","filter","symbol","schema","getSchemaForSymbols","JSON","stringify","encoding","saveJSONSchemaFile","mockFilePath","schemaFileStr","parse","jsfResult","JSONSchemaFaker","definitions","json","rspNameMatchs","fileContent","saveMockJSONFile","mockFile","req","res","send","generateMockRoute","transferTSFile","error","main"],"sourceRoot":""}