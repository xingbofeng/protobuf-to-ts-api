{"version":3,"file":"cli.js","mappings":"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","sources":["webpack://pb-to-ts-api/./src/index.ts","webpack://pb-to-ts-api/./src/interfaces/RequestMethods.ts","webpack://pb-to-ts-api/./src/modules/getPbjsFile.ts","webpack://pb-to-ts-api/./src/modules/getPbtsFile.ts","webpack://pb-to-ts-api/./src/modules/mockServer.ts","webpack://pb-to-ts-api/./src/modules/saveApiFile.ts","webpack://pb-to-ts-api/./src/modules/saveJSONSchemaFile.ts","webpack://pb-to-ts-api/./src/modules/saveMockJSONFile.ts","webpack://pb-to-ts-api/./src/modules/saveTypeScriptDefineFile.ts","webpack://pb-to-ts-api/./src/modules/transferTSFile.ts","webpack://pb-to-ts-api/./src/modules/travelAllModule.ts","webpack://pb-to-ts-api/./src/utils/getRequestMethod.ts","webpack://pb-to-ts-api/external commonjs \"chalk\"","webpack://pb-to-ts-api/external commonjs \"express\"","webpack://pb-to-ts-api/external commonjs \"glob\"","webpack://pb-to-ts-api/external commonjs \"json-schema-faker\"","webpack://pb-to-ts-api/external commonjs \"minimist\"","webpack://pb-to-ts-api/external commonjs \"mkdirp\"","webpack://pb-to-ts-api/external commonjs \"protobufjs-cli/pbjs\"","webpack://pb-to-ts-api/external commonjs \"protobufjs-cli/pbts\"","webpack://pb-to-ts-api/external commonjs \"ts-morph\"","webpack://pb-to-ts-api/external commonjs \"typescript-json-schema\"","webpack://pb-to-ts-api/external node-commonjs \"fs\"","webpack://pb-to-ts-api/external node-commonjs \"path\"","webpack://pb-to-ts-api/webpack/bootstrap","webpack://pb-to-ts-api/webpack/startup"],"sourcesContent":["import chalk from 'chalk';\nimport { Express } from 'express';\nimport glob from 'glob';\nimport minimist from 'minimist';\n\nimport { IOptions } from './interfaces/IOptions';\nimport { initServer } from './modules/mockServer';\nimport { transferTSFile } from './modules/transferTSFile';\n\nconst getUsage = () =>\n  `Usage: ${chalk.bold.green('pb2TSApi')} [options] ${chalk.bold.red('[file1.proto file2.proto ...]')} or ${chalk.bold.red('[./**/*.proto]')}`;\n\nconst getHelp = () =>\n  `Help:\n${chalk.bold.green('--requestModule -r')}: the request module of you want to set, default is ${chalk.bold.red('\\'axios\\'')}, you can set to your custom request method, for example ${chalk.bold.red('\\'@/request\\'')};\n${chalk.bold.green('--baseUrl -b')}: the base url of you want to set, default is ${chalk.bold.red('\\'/\\'')}, you can set to your api path, for example ${chalk.bold.red('\\'/api\\'')};\n${chalk.bold.green('--folder -f')}: the folder of you want to save the output files, default is ${chalk.bold.red('\\'./api\\'')};\n${chalk.bold.green('--root -r')}: the root path set to protobufjs, default is ${chalk.bold.red('the path of this command run')};\n${chalk.bold.green('--optional -o')}: is transfrom d.ts optional to false, because of protobuf 3.0 set all filed is optional, default is ${chalk.bold.red('true')};\n${chalk.bold.green('--mock -m')}: is open mock server, default is ${chalk.bold.red('false')};\n${chalk.bold.green('--port -p')}: mock server port, default is ${chalk.bold.red('3000')};\n`;\n\nexport async function main() {\n  try {\n    const argv = minimist(process.argv.slice(2), {\n      alias: {\n        requestModule: 'r',\n        baseUrl: 'b',\n        folder: 'f',\n        root: 'r',\n        optional: 'o',\n        mock: 'm',\n        port: 'p',\n        help: 'h',\n      },\n      string: ['requestModule', 'baseUrl', 'folder', 'root', 'port'],\n      boolean: ['optional', 'mock'],\n      default: {\n        requestModule: 'axios',\n        baseUrl: '/',\n        folder: './api',\n        root: process.cwd(),\n        optional: true,\n        mock: false,\n        port: '3000',\n        help: '',\n      },\n    });\n    if (argv.help) {\n      process.stderr.write(getHelp());\n      process.exit(1);\n    }\n    const { _: files } = argv;\n    const options: IOptions = {\n      requestModule: argv.requestModule,\n      baseUrl: argv.baseUrl,\n      folder: argv.folder,\n      root: argv.root,\n      optional: argv.optional,\n      mock: argv.mock,\n      port: argv.port,\n      help: argv.help,\n    };\n    if (!files.length) {\n      process.stderr.write(getUsage());\n      process.exit(1);\n    }\n    const protoFiles = await glob(files, { ignore: 'node_modules/**', windowsPathsNoEscape: true });\n    if (!protoFiles.length) {\n      process.stderr.write(chalk.bold.red(`there is not files for the flowing paths: \\n ${files.join('\\n')}`));\n      process.exit(1);\n    }\n    let mockServer: Express;\n    if (options.mock) {\n      mockServer = initServer(options);\n    }\n    await Promise.all(protoFiles.map(filePath => transferTSFile(filePath, mockServer, options)));\n  } catch (err) {\n    console.error(err);\n    process.exit(1);\n  }\n}\n\nmain();\n","export enum RequestMethods {\n  post = 'post',\n  get = 'get',\n}\n","import mkdirp from 'mkdirp';\nimport path from 'path';\nimport pbjs from 'protobufjs-cli/pbjs';\n\nimport { IOptions } from '../interfaces/IOptions';\n\n/**\n * 通过protobuf-cli生成临时的js文件，用于再生成ts文件，生成ts文件后，删掉临时的js文件\n * @param {String} filePath proto文件的路径\n * @returns {Promise<string>} 生成临时的js文件的路径\n */\nexport async function getPbjsFile(filePath: string, options: IOptions): Promise<string> {\n  const { folder = '' } = options;\n  const fileName = filePath.replace('.proto', '.js');\n  const pbjsFilePath = path.resolve(process.cwd(), folder, fileName);\n  const p = path.dirname(pbjsFilePath);\n  await mkdirp(p);\n  return new Promise((resolve, reject) => {\n    pbjs.main(['-p', options.root, '-t', 'static-module', '-w', 'commonjs', '-o', pbjsFilePath, path.resolve(process.cwd(), filePath)], err => {\n      if (err) {\n        reject(err);\n      }\n      resolve(pbjsFilePath);\n    });\n  });\n}\n","import path from 'path';\nimport pbts from 'protobufjs-cli/pbts';\n\nimport { IOptions } from '../interfaces/IOptions';\n\n/**\n * 通过protobuf-cli生成d.ts文件\n * @param {String} pbjsFilePath 生成的js文件的路径\n * @returns {Promise<string>} 生成临时的js文件的路径\n */\nexport function getPbtsFile(pbjsFilePath: string, options: IOptions): Promise<string> {\n  const { folder = '' } = options;\n  const pbtsFilePath = path.resolve(process.cwd(), folder, pbjsFilePath.replace('.js', '.d.ts'));\n  return new Promise((resolve, reject) => {\n    pbts.main(['-p', options.root, '-o', pbtsFilePath, pbjsFilePath], err => {\n      if (err) {\n        reject(err);\n      }\n      resolve(pbtsFilePath);\n    });\n  });\n}\n","import express, { Express } from 'express';\nimport fs from 'fs';\n\nimport { IOptions } from '../interfaces/IOptions';\nimport { getRequestMethod } from '../utils/getRequestMethod';\n\n/**\n * 初始化 mock server\n * @param {IOptions} options 用户自定义配置\n * @returns {Express} mockServer 通过express实例化的mock server app\n */\nexport function initServer(options: IOptions) {\n  const mockServer = express();\n  const { port = '3000' } = options;\n  mockServer.listen(+port, () => {\n    console.log(`mock server listening on port ${port}`);\n  });\n  return mockServer;\n}\n\n/**\n * 拿到mock文件，生成mock server\n * @param {String} mockFilePath mock文件的路径\n * @param {Express} mockServer express server 对象\n * @param {IOptions} options 用户自定义配置\n */\nexport async function generateMockRoute(mockFilePath: string, mockServer: Express, options: IOptions) {\n  const { baseUrl } = options;\n  const mockFile = await fs.promises.readFile(mockFilePath, { encoding: 'utf-8' });\n  const json = JSON.parse(mockFile);\n  for (const apiName in json) {\n    if (Object.hasOwnProperty.call(json, apiName)) {\n      const requestMethod = getRequestMethod(apiName);\n      mockServer[requestMethod](`${baseUrl}${apiName}`, (req, res) => {\n        res.send(json[apiName]);\n      });\n      console.log(`mockServer generate mock route: ${baseUrl}${apiName} success`);\n    }\n  }\n}\n","import fs from 'fs';\nimport path from 'path';\nimport { Project } from 'ts-morph';\n\nimport { IOptions } from '../interfaces/IOptions';\nimport { RequestMethods } from '../interfaces/RequestMethods';\nimport { getRequestMethod } from '../utils/getRequestMethod';\nimport { travelAllModule } from './travelAllModule';\n\nconst getLinePerfix = (requestModule: string, tsDefineFilename: string) =>\n  `/* eslint-disable */\nimport request from ${requestModule};\nimport api from './${tsDefineFilename.replace('.ts', '')}';\n`;\n\nconst getLine = (apiName: string, reqName: string, rspName: string, requestMethod: RequestMethods, baseUrl: string) => `\nexport function ${apiName}(req: api.${reqName}): Promise<api.${rspName}> {\n  return request.${requestMethod}('${baseUrl}${apiName}', ${requestMethod === 'post' ? 'req' : '{ params: req }'});\n};\n`;\n\n/**\n * 生成前端api请求文件\n * @param {String} pbtsFilePath 生成的d.ts定义文件的路径\n * @param {Object} options 用户传入的自定义配置选项\n */\nexport async function saveApiFile(pbtsFilePath: string, options: IOptions) {\n  const {\n    requestModule,\n    baseUrl,\n  } = options;\n  // 获取当前d.ts文件的目录名称和文件名称\n  const tsDefineDirname = path.dirname(pbtsFilePath);\n  const tsDefineFilename = path.basename(pbtsFilePath);\n  let apiline = '';\n  apiline += getLinePerfix(\n    requestModule,\n    tsDefineFilename,\n  );\n  const project = new Project();\n  project.addSourceFileAtPath(pbtsFilePath);\n  const file = project.getSourceFileOrThrow(pbtsFilePath);\n  const modules = file.getModules();\n  travelAllModule(modules, (module, parentName) => {\n    const interfaces = module.getInterfaces();\n    interfaces.length && interfaces.forEach(i => {\n      const reqName = i.getName();\n      // 找到请求的interface名称\n      const reqNameMatchs = reqName.match(/^I(\\S*)Req$/);\n      if (reqNameMatchs && reqNameMatchs.length) {\n        const apiName = reqNameMatchs[1];\n        // 找到返回值的interface\n        const rspName = `I${apiName}Rsp`;\n        const rsp = interfaces.find(item => item.getName() === rspName);\n        if (!rsp) {\n          return;\n        }\n        apiline += getLine(\n          apiName,\n          `${parentName}.${reqName}`,\n          `${parentName}.${rspName}`,\n          getRequestMethod(apiName),\n          baseUrl,\n        );\n      }\n    });\n  });\n\n  await fs.promises.writeFile(path.resolve(tsDefineDirname, tsDefineFilename.replace('.d.ts', '.ts')), apiline);\n}\n","import fs from 'fs';\nimport path from 'path';\nimport { buildGenerator, getProgramFromFiles } from 'typescript-json-schema';\n\n/**\n * 生成前端api请求JSON Schema 文件\n * @param {String} pbtsFilePath 生成的d.ts定义文件的路径\n * @returns {String} jsonSchemaFilePath 生成的json schema 文件路径\n */\nexport async function saveJSONSchemaFile(pbtsFilePath: string) {\n  const settings = {\n    required: true,\n  };\n  const compilerOptions = {\n    strictNullChecks: true,\n  };\n\n  const program = getProgramFromFiles([path.resolve(pbtsFilePath)], compilerOptions, process.cwd());\n  const generator = buildGenerator(program, settings);\n  const symbols = (generator?.getUserSymbols() || []).filter(symbol => /I(\\S*)Rsp$/.test(symbol));\n  const schema = generator?.getSchemaForSymbols(symbols);\n  const jsonSchemaFilePath = pbtsFilePath.replace('.d.ts', '.json');\n  await fs.promises.writeFile(jsonSchemaFilePath, JSON.stringify(schema, null, 2), { encoding: 'utf-8' });\n  return jsonSchemaFilePath;\n}\n","import fs from 'fs';\nimport { JSONSchemaFaker } from 'json-schema-faker';\nimport { JsonObject, JsonValue } from 'type-fest';\n\n/**\n * 生成前端api请求 mock 文件\n * @param {String} jsonSchemaFilePath 生成的JSON Schema 文件的路径\n */\nexport async function saveMockJSONFile(jsonSchemaFilePath: string) {\n  const schemaFileStr = await fs.promises.readFile(jsonSchemaFilePath, { encoding: 'utf-8' });\n  const schema = JSON.parse(schemaFileStr.replace(/(?<=#\\/)definitions\\//g, ''));\n  const jsfResult = await JSONSchemaFaker.resolve(schema.definitions) as JsonObject;\n  const json: Record<string, JsonValue> = {};\n  for (const key in jsfResult) {\n    if (Object.hasOwnProperty.call(jsfResult, key)) {\n      const rspNameMatchs = key.match(/I(\\S*)Rsp$/);\n      if (rspNameMatchs && rspNameMatchs.length) {\n        const apiName = rspNameMatchs[1];\n        json[apiName] = jsfResult[key];\n      }\n    }\n  }\n  const fileContent = JSON.stringify(json, null, 2);\n  const mockFilePath = jsonSchemaFilePath.replace('.json', '.mock.json');\n  fs.writeFileSync(mockFilePath, fileContent, { encoding: 'utf-8' });\n  return mockFilePath;\n}\n","import { ImportDeclaration, Project } from 'ts-morph';\n\nimport { IOptions } from '../interfaces/IOptions';\nimport { travelAllModule } from './travelAllModule';\n\n/**\n * 去除protobuf-cli生成的d.ts文件中的冗余的class模块\n * @param {String} pbtsFilePath 生成的d.ts定义文件的路径\n * @param {Object} options 用户传入的自定义配置选项\n */\nexport async function saveTypeScriptDefineFile(pbtsFilePath: string, options: IOptions) {\n  const project = new Project();\n  project.addSourceFileAtPath(pbtsFilePath);\n  const file = project.getSourceFileOrThrow(pbtsFilePath);\n  const modules = file.getModules();\n  // 去掉生成的import\n  file.getImportDeclarations().forEach(i => i.remove());\n\n  // 对于importString的处理\n  file.getImportStringLiterals().forEach(i => {\n    const p = i.getParent()?.getParent() as ImportDeclaration;\n    p.remove();\n  });\n\n  travelAllModule(modules, module => {\n    // 去掉生成的class\n    const classes = module.getClasses();\n    classes.forEach(c => c.remove());\n\n    // 去掉生成的rpc-type\n    const typeAliases = module.getTypeAliases();\n    typeAliases.forEach(t => t.remove());\n\n    if (!options.optional) {\n      module.getInterfaces().forEach(item => {\n        const structure = item.getStructure();\n        structure.properties?.forEach(property => {\n          property.hasQuestionToken = false;\n          if (typeof property.type === 'string') {\n            property.type = property.type.replace(/^\\((\\S*)\\|null\\)$/, '$1');\n          }\n        });\n        item.set(structure);\n      });\n    }\n  });\n  project.saveSync();\n}\n","import { Express } from 'express';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { IOptions } from '../interfaces/IOptions';\nimport { getPbjsFile } from './getPbjsFile';\nimport { getPbtsFile } from './getPbtsFile';\nimport { generateMockRoute } from './mockServer';\nimport { saveApiFile } from './saveApiFile';\nimport { saveJSONSchemaFile } from './saveJSONSchemaFile';\nimport { saveMockJSONFile } from './saveMockJSONFile';\nimport { saveTypeScriptDefineFile } from './saveTypeScriptDefineFile';\n\n/**\n * 转换protobuf定义文件为ts定义文件和api请求文件\n * @param {String} filePath protobuf定义文件的路径\n * @param {Express} mockServer mockServer对象，是一个express实例化的对象\n * @param {Object} options 用户自定义配置\n */\nexport async function transferTSFile(filePath: string, mockServer: Express, options: IOptions) {\n  const pbjsFilePath = await getPbjsFile(filePath, options);\n  const pbtsFilePath = await getPbtsFile(pbjsFilePath, options);\n  await fs.promises.unlink(pbjsFilePath);\n  await saveTypeScriptDefineFile(pbtsFilePath, options);\n  await saveApiFile(pbtsFilePath, options);\n  const jsonSchemaFilePath = await saveJSONSchemaFile(pbtsFilePath);\n  const mockFilePath = await saveMockJSONFile(jsonSchemaFilePath);\n  console.log(`success generate ${filePath} to ${path.resolve(options.folder, filePath)}.d.ts and ${path.resolve(options.folder, filePath)}.ts`);\n  if (options.mock && mockServer) {\n    console.log('begin open mock server');\n    await generateMockRoute(mockFilePath, mockServer, options);\n  }\n}\n","import { ModuleDeclaration } from 'ts-morph';\n/**\n * 递归一个ts文件下所有模块\n * @param {ModuleDeclaration[]} modules 通过ts-morph生成模块声明\n * @param {Function} callback 递归一个ts文件所有模块下对于每个模块的回调函数\n * @param {String} parentName 递归到当前模块，所有父级namespace的名称，通过.符号分割\n */\nexport function travelAllModule(modules: ModuleDeclaration[], callback: (module: ModuleDeclaration, fullName: string) => void, parentName = '') {\n  for (const module of modules) {\n    const children = module.getModules();\n    const hasModule = children.length > 0;\n    const fullName = `${parentName ? `${parentName}.` : ''}${module.getName()}`;\n    callback(module, fullName);\n    if (hasModule) {\n      travelAllModule(children, callback, fullName);\n    }\n  }\n}\n","import { RequestMethods } from '../interfaces/RequestMethods';\n\nexport function getRequestMethod(apiName: string): RequestMethods {\n  return /post/.test(apiName.toLowerCase()) ? RequestMethods.post : RequestMethods.get;\n}\n","module.exports = require(\"chalk\");","module.exports = require(\"express\");","module.exports = require(\"glob\");","module.exports = require(\"json-schema-faker\");","module.exports = require(\"minimist\");","module.exports = require(\"mkdirp\");","module.exports = require(\"protobufjs-cli/pbjs\");","module.exports = require(\"protobufjs-cli/pbts\");","module.exports = require(\"ts-morph\");","module.exports = require(\"typescript-json-schema\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["getUsage","bold","green","red","getHelp","main","argv","process","slice","alias","requestModule","baseUrl","folder","root","optional","mock","port","help","string","boolean","default","cwd","stderr","write","exit","_","files","options","length","protoFiles","ignore","windowsPathsNoEscape","mockServer","join","initServer","Promise","all","map","filePath","transferTSFile","err","console","error","RequestMethods","fileName","replace","pbjsFilePath","resolve","p","dirname","reject","pbtsFilePath","listen","log","mockFilePath","mockFile","promises","readFile","encoding","json","JSON","parse","apiName","Object","hasOwnProperty","call","requestMethod","getRequestMethod","req","res","send","tsDefineDirname","tsDefineFilename","basename","apiline","getLinePerfix","project","Project","addSourceFileAtPath","modules","getSourceFileOrThrow","getModules","travelAllModule","module","parentName","interfaces","getInterfaces","forEach","i","reqName","getName","reqNameMatchs","match","rspName","find","item","getLine","writeFile","program","getProgramFromFiles","strictNullChecks","generator","buildGenerator","required","symbols","getUserSymbols","filter","symbol","test","schema","getSchemaForSymbols","jsonSchemaFilePath","stringify","schemaFileStr","jsfResult","JSONSchemaFaker","definitions","key","rspNameMatchs","fileContent","writeFileSync","file","getImportDeclarations","remove","getImportStringLiterals","getParent","getClasses","c","getTypeAliases","t","structure","getStructure","properties","property","hasQuestionToken","type","set","saveSync","getPbjsFile","getPbtsFile","unlink","saveTypeScriptDefineFile","saveApiFile","saveJSONSchemaFile","saveMockJSONFile","generateMockRoute","callback","children","hasModule","fullName","toLowerCase","post","get","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}