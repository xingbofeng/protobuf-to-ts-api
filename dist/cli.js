#!/usr/bin/env node
(()=>{"use strict";var e={n:o=>{var t=o&&o.__esModule?()=>o.default:()=>o;return e.d(t,{a:t}),t},d:(o,t)=>{for(var r in t)e.o(t,r)&&!e.o(o,r)&&Object.defineProperty(o,r,{enumerable:!0,get:t[r]})},o:(e,o)=>Object.prototype.hasOwnProperty.call(e,o)};const o=require("chalk");var t=e.n(o);const r=require("glob");var s=e.n(r);const n=require("minimist");var a=e.n(n);const l=require("express");var i=e.n(l);const c=require("fs");var p=e.n(c);let u=function(e){return e.post="post",e.get="get",e}({});function d(e){return/post/.test(e.toLowerCase())?u.post:u.get}const f=require("path");var m=e.n(f);const g=require("mkdirp");var h=e.n(g);const b=require("protobufjs-cli/pbjs");var $=e.n(b);const w=require("protobufjs-cli/pbts");var v=e.n(w);const y=require("ts-morph");function q(e,o,t=""){for(const r of e){const e=r.getModules(),s=e.length>0,n=`${t?`${t}.`:""}${r.getName()}`;o(r,n),s&&q(e,o,n)}}const S=require("typescript-json-schema"),k=require("json-schema-faker");!async function(){try{const e=a()(process.argv.slice(2),{alias:{requestModule:"r",baseUrl:"b",folder:"f",root:"r",optional:"o",mock:"m",port:"p",help:"h"},string:["requestModule","baseUrl","folder","root","port"],boolean:["optional","mock"],default:{requestModule:"axios",baseUrl:"/",folder:"./api",root:process.cwd(),optional:!0,mock:!1,port:"3000",help:""}});e.help&&(process.stderr.write(`Help:\n${t().bold.green("--requestModule -r")}: the request module of you want to set, default is ${t().bold.red("'axios'")}, you can set to your custom request method, for example ${t().bold.red("'@/request'")};\n${t().bold.green("--baseUrl -b")}: the base url of you want to set, default is ${t().bold.red("'/'")}, you can set to your api path, for example ${t().bold.red("'/api'")};\n${t().bold.green("--folder -f")}: the folder of you want to save the output files, default is ${t().bold.red("'./api'")};\n${t().bold.green("--root -r")}: the root path set to protobufjs, default is ${t().bold.red("the path of this command run")};\n${t().bold.green("--optional -o")}: is transfrom d.ts optional to false, because of protobuf 3.0 set all filed is optional, default is ${t().bold.red("true")};\n${t().bold.green("--mock -m")}: is open mock server, default is ${t().bold.red("false")};\n${t().bold.green("--port -p")}: mock server port, default is ${t().bold.red("3000")};\n`),process.exit(1));const{_:o}=e,r={requestModule:e.requestModule,baseUrl:e.baseUrl,folder:e.folder,root:e.root,optional:e.optional,mock:e.mock,port:e.port,help:e.help};o.length||(process.stderr.write(`Usage: ${t().bold.green("pb2TSApi")} [options] ${t().bold.red("[file1.proto file2.proto ...]")} or ${t().bold.red("[./**/*.proto]")}`),process.exit(1));const n=await s()(o,{ignore:"node_modules/**",windowsPathsNoEscape:!0});let l;n.length||(process.stderr.write(t().bold.red(`there is not files for the flowing paths: \n ${o.join("\n")}`)),process.exit(1)),r.mock&&(l=function(e){const o=i()(),{port:t="3000"}=e;return o.listen(+t,(()=>{console.log(`mock server listening on port ${t}`)})),o}(r)),await Promise.all(n.map((e=>async function(e,o,t){const r=await async function(e,o){const{folder:t=""}=o,r=e.replace(".proto",".js"),s=m().resolve(process.cwd(),t,r),n=m().dirname(s);return await h()(n),new Promise(((t,r)=>{$().main(["-p",o.root,"-t","static-module","-w","commonjs","-o",s,m().resolve(process.cwd(),e)],(e=>{e&&r(e),t(s)}))}))}(e,t),s=await function(e,o){const{folder:t=""}=o,r=m().resolve(process.cwd(),t,e.replace(".js",".d.ts"));return new Promise(((t,s)=>{v().main(["-p",o.root,"-o",r,e],(e=>{e&&s(e),t(r)}))}))}(r,t);await p().promises.unlink(r),await async function(e,o){const t=new y.Project;t.addSourceFileAtPath(e);const r=t.getSourceFileOrThrow(e),s=r.getModules();r.getImportDeclarations().forEach((e=>e.remove())),r.getImportStringLiterals().forEach((e=>{var o;(null===(o=e.getParent())||void 0===o?void 0:o.getParent()).remove()})),q(s,(e=>{e.getClasses().forEach((e=>e.remove())),e.getTypeAliases().forEach((e=>e.remove())),o.optional||e.getInterfaces().forEach((e=>{var o;const t=e.getStructure();null===(o=t.properties)||void 0===o||o.forEach((e=>{e.hasQuestionToken=!1,"string"==typeof e.type&&(e.type=e.type.replace(/^\((\S*)\|null\)$/,"$1"))})),e.set(t)}))})),t.saveSync()}(s,t),await async function(e,o){const{requestModule:t,baseUrl:r}=o,s=m().dirname(e),n=m().basename(e);let a="";a+=((e,o)=>`/* eslint-disable */\nimport request from ${e};\nimport api from './${o.replace(".ts","")}';\n`)(t,n);const l=new y.Project;l.addSourceFileAtPath(e),q(l.getSourceFileOrThrow(e).getModules(),((e,o)=>{const t=e.getInterfaces();t.length&&t.forEach((e=>{const s=e.getName(),n=s.match(/^I(\S*)Req$/);if(n&&n.length){const e=n[1],l=`I${e}Rsp`;if(!t.find((e=>e.getName()===l)))return;a+=((e,o,t,r,s)=>`\nexport function ${e}(req: api.${o}): Promise<api.${t}> {\n  return request.${r}('${s}${e}', ${"post"===r?"req":"{ params: req }"});\n};\n`)(e,`${o}.${s}`,`${o}.${l}`,d(e),r)}}))})),await p().promises.writeFile(m().resolve(s,n.replace(".d.ts",".ts")),a)}(s,t);const n=await async function(e){const o=(0,S.getProgramFromFiles)([m().resolve(e)],{strictNullChecks:!0},process.cwd()),t=(0,S.buildGenerator)(o,{required:!0}),r=((null==t?void 0:t.getUserSymbols())||[]).filter((e=>/I(\S*)Rsp$/.test(e))),s=null==t?void 0:t.getSchemaForSymbols(r),n=e.replace(".d.ts",".json");return await p().promises.writeFile(n,JSON.stringify(s,null,2),{encoding:"utf-8"}),n}(s),a=await async function(e){const o=await p().promises.readFile(e,{encoding:"utf-8"}),t=JSON.parse(o.replace(/(?<=#\/)definitions\//g,"")),r=await k.JSONSchemaFaker.resolve(t.definitions),s={};for(const e in r)if(Object.hasOwnProperty.call(r,e)){const o=e.match(/I(\S*)Rsp$/);o&&o.length&&(s[o[1]]=r[e])}const n=JSON.stringify(s,null,2),a=e.replace(".json",".mock.json");return p().writeFileSync(a,n,{encoding:"utf-8"}),a}(n);console.log(`success generate ${e} to ${m().resolve(t.folder,e)}.d.ts and ${m().resolve(t.folder,e)}.ts`),t.mock&&o&&(console.log("begin open mock server"),await async function(e,o,t){const{baseUrl:r}=t,s=await p().promises.readFile(e,{encoding:"utf-8"}),n=JSON.parse(s);for(const e in n)Object.hasOwnProperty.call(n,e)&&(o[d(e)](`${r}${e}`,((o,t)=>{t.send(n[e])})),console.log(`mockServer generate mock route: ${r}${e} success`))}(a,o,t))}(e,l,r))))}catch(e){console.error(e),process.exit(1)}}()})();
//# sourceMappingURL=cli.js.map